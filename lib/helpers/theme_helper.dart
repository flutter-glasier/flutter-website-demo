import 'dart:async';
import 'package:flutter/material.dart';

class ThemeHelper {
  static StreamController<String> controller = StreamController<String>();

  static BaseTheme? theme() => _getDefaultTheme();

  static String? _appTheme;

  static Stream<String> appthemeString = controller.stream;

  static Map<String, BaseTheme> _supportedThemes = {
    "white": BaseTheme(),
    "dark": DarkTheme(),
    "custom": CustomTheme(),
  };

  static BaseTheme? _getDefaultTheme() {
    //return default strings if locale is not set

    if (_appTheme == null) return BaseTheme();

    //throw exception to notify given local is not found or not generated by the generator

    if (!_supportedThemes.containsKey(_appTheme))
      throw Exception(
          "$_appTheme is not found.\n Make sure you have added this locale in JSON file\n Try running flutter pub run build_runner");

    //return locale from map

    return _supportedThemes[_appTheme!];
  }

  static void changeTheme(String _newTheme) {
    _appTheme = _newTheme;
    controller.add(_newTheme);
  }
}

class DarkTheme extends BaseTheme {
  @override
  Color get colorPrimary => Colors.pink;
}

class CustomTheme extends BaseTheme {
  @override
  Color get colorPrimary => fromHex("#4EB45E");
  @override
  Color get selectedFilterColor => fromHex("#F2FCF4");

  @override
  Color get unSelectedBgColor => fromHex("#f7f7f7");
}

class BaseTheme {
  Color get colorPrimary => fromHex("#3C19C0");
  Color get whiteColor => fromHex("#FFFFFF");
  Color get grey => fromHex("#696969");

  TextStyle get text8RegularWhite {
    return TextStyle(
        fontSize: 8,
        fontWeight: FontWeight.w400,
        letterSpacing: 0.9,
        color: Colors.white);
  }

  TextStyle get text9RegularGreen {
    return TextStyle(
        fontSize: 9,
        fontWeight: FontWeight.w400,
        letterSpacing: 0.9,
        color: Colors.green);
  }

  TextStyle get text9RegularGrey {
    return TextStyle(
        fontSize: 9,
        fontWeight: FontWeight.w400,
        letterSpacing: 0.9,
        color: Colors.grey.withOpacity(0.6));
  }

  TextStyle get text10Blue500Semi {
    return TextStyle(
        fontSize: 10,
        fontWeight: FontWeight.w400,
        letterSpacing: 0.9,
        color: Colors.blue[500]);
  }

  TextStyle get text12RegularGrey {
    return TextStyle(
        fontSize: 12,
        fontWeight: FontWeight.w400,
        letterSpacing: 0.9,
        color: Colors.grey.withOpacity(0.6));
  }

  TextStyle get text12SemiBoldRed {
    return TextStyle(
        fontSize: 12,
        fontWeight: FontWeight.w500,
        letterSpacing: 0.8,
        color: Colors.red);
  }

  TextStyle get text12SemiBoldBlack {
    return TextStyle(
        fontSize: 12,
        fontWeight: FontWeight.w500,
        letterSpacing: 0.8,
        color: Colors.black,
        overflow: TextOverflow.ellipsis);
  }

  TextStyle get text12SemiBoldPrimary {
    return TextStyle(
        fontSize: 12,
        fontWeight: FontWeight.w500,
        letterSpacing: 0.8,
        color: colorPrimary,
        overflow: TextOverflow.ellipsis);
  }

  TextStyle get text12SemiBoldWhite {
    return TextStyle(
        fontSize: 12,
        fontWeight: FontWeight.w500,
        letterSpacing: 0.8,
        color: Colors.white);
  }

  TextStyle get text14SemiBolddBlack {
    return TextStyle(
      fontSize: 14,
      fontWeight: FontWeight.w500,
      letterSpacing: 0.8,
    );
  }

  TextStyle get text14SemiGrey {
    return TextStyle(
        fontSize: 14,
        fontWeight: FontWeight.w500,
        letterSpacing: 0.8,
        color: Colors.grey);
  }

  TextStyle get text16SemiGrey {
    return TextStyle(
        fontSize: 16,
        fontWeight: FontWeight.w500,
        letterSpacing: 0.8,
        color: Colors.grey);
  }

  TextStyle get text16SemiBlack {
    return TextStyle(
        fontSize: 16,
        fontWeight: FontWeight.w600,
        letterSpacing: 0.8,
        color: Colors.black);
  }

  TextStyle get text18BolddBlack {
    return TextStyle(
      fontSize: 18,
      fontWeight: FontWeight.w900,
      letterSpacing: 0.8,
    );
  }

  TextStyle get text24BoldBlack {
    return TextStyle(
      fontSize: 24,
      fontWeight: FontWeight.bold,
      letterSpacing: 0.8,
    );
  }

  TextStyle get text35BoldBlack {
    return TextStyle(
      fontSize: 30,
      fontWeight: FontWeight.bold,
      letterSpacing: 0.8,
    );
  }

  TextStyle get text60BoldBlack {
    return TextStyle(
      fontSize: 60,
      fontWeight: FontWeight.bold,
      letterSpacing: 0.8,
    );
  }
}

BaseTheme? get appTheme => ThemeHelper.theme();

Color fromHex(String hexString) {
  final buffer = StringBuffer();
  if (hexString.length == 6 || hexString.length == 7) buffer.write('ff');
  buffer.write(hexString.replaceFirst('#', ''));
  return Color(int.parse(buffer.toString(), radix: 16));
}
